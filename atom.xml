<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>clickmouse</title>
  
  <subtitle>To record what I learned</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://clickmouse.github.io/"/>
  <updated>2020-02-03T02:57:12.600Z</updated>
  <id>https://clickmouse.github.io/</id>
  
  <author>
    <name>clickmouse</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Run riscv on qemu</title>
    <link href="https://clickmouse.github.io/run-riscv-on-qemu/"/>
    <id>https://clickmouse.github.io/run-riscv-on-qemu/</id>
    <published>2020-01-31T02:42:38.751Z</published>
    <updated>2020-02-03T02:57:12.600Z</updated>
    
    <content type="html"><![CDATA[<p>This blog is about the whole procedure of running riscv on qemu. It also records some pitfalls I encountered.</p><a id="more"></a><h1>Preparation</h1><p>If you ever downloaded source code from GitHub, you must have experienced the desperation that the download speed is only 50kb/s. Moreover, downloads are interrupted from time to time due to network problems.</p><p>So, you need git proxy to solve this problem. Please refer to <a href="https://clickmouse.github.io/git-proxy/">my last blog</a>(最终发现没啥用…)</p><h1>Possible problem</h1><p>When I git clone riscv-gnu-toolchain from GitHub, it was often stuck while receiving objects.(usually 99%…)</p><p>Someone says that ‘VMware running on NAT has this problem. Changing it to Bridged will fix the issue.’<sup>[1] </sup></p><p>However, the same problem appeared on my host machine. Finally, I failed to fix this issue.</p><p>There are two possible solutions:</p><ol><li>Wait until it continues.</li><li>Interrupt and download again.</li></ol><p>The first one doesn’t make sense for me and the second one is to try your luck…</p><p>I have tried to download it again and again but fail.</p><p>Finally, I asked a senior studying in Japan to help me clone it and send it to me.</p><center><img src="/run-riscv-on-qemu/japan.png" class></center><center>Fig 1 Envy</center># Get riscv-gnu-toolchain<h3 id="Prerequisites">Prerequisites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev git</span><br></pre></td></tr></table></figure><p>To make sure you have <code>git</code> on your system before the next step. Other standard packages are needed to build the toolchain.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/my-riscv</span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/riscv/riscv-gnu-toolchain</span><br></pre></td></tr></table></figure><p>Because there are many submodules in this repository, so we need to add <code>--recursive</code> to fetch the submodules automatically.</p><h1>Installation(Newlib)</h1><h3 id="Make">Make</h3><p>Pick an install path by using <code>--prefix</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/home/clickmouse/my-riscv/opt/riscv</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>You will get riscv-64-unknown-elf-gcc and its cousins in <code>opt/riscv</code>. The c runtime library is Newlib.</p><h3 id="Specfication">Specfication</h3><p>Newlib is a runtime c standard library.</p><blockquote><p>A <strong>runtime library</strong> (<strong>RTL</strong>) is a set of low-level routines used by a <a href="https://en.wikipedia.org/wiki/Compiler" target="_blank" rel="noopener">compiler</a> to invoke some of the behaviors of a <a href="https://en.wikipedia.org/wiki/Runtime_environment" target="_blank" rel="noopener">runtime environment</a>, by inserting calls to the runtime library into compiled executable binary.<sup>[2]</sup></p></blockquote><p>A runtime library is needed by any c program. Functions such as _read(), _write(), _getpid() and so on are implemented in runtime library.</p><h3 id="Test">Test</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./riscv64-unknown-elf-gcc -v</span><br></pre></td></tr></table></figure><p>You will get a lot of information about riscv64-unknown-elf-gcc.</p><p>Some useful information is listed below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">--target=riscv64-unknown-elf-gcc <span class="comment">#tool is riscv64-unknown-elf-gcc</span></span><br><span class="line">--with-newlib <span class="comment">#runtime lib --&gt; newlib</span></span><br><span class="line">--with-abi=lp64d <span class="comment">#The abi(Application Binary Interface)supported by the toolchain is lp64</span></span><br><span class="line">--with-arch=rv64imafdc <span class="comment">#architecture supported is rv64imafdc.</span></span><br><span class="line"><span class="comment">#imadfdc are names of ISA base and extensions</span></span><br></pre></td></tr></table></figure><h1>Installation(Linux)</h1><p>Pick an install path by using <code>--prefix</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/home/clickmous/my-riscv/opt/riscv-linux</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>You will get riscv-64-unknown-linux-gcc and its cousins. The c runtime library is glibc.</p><h1>Installation(Others)</h1><p>Please refer to <a href="http://www.lujun.org.cn/?p=4257" target="_blank" rel="noopener">riscv各种版本gcc工具链编译与安装</a><sup>[3]</sup></p><h1>RISC-V QEMU</h1><h4 id="Make-2">Make</h4><p><code>current directory: riscv-gnu-toolchain</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu</span><br><span class="line">./configure --target-list=riscv64-softmmu <span class="comment">#set target list (default: build everything)</span></span><br><span class="line"> make -j$(nproc)</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>If Errors are like this</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">install -d -m 0755 <span class="string">"/usr/local/share/qemu"</span></span><br><span class="line">install: cannot change permissions of ‘/usr/<span class="built_in">local</span>/share/qemu’: No such file or directory</span><br><span class="line">Makefile:828: recipe <span class="keyword">for</span> target <span class="string">'install-datadir'</span> failed</span><br></pre></td></tr></table></figure><p>Please run <code>sudo make install</code></p><p>You can test by running following commands</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ qemu-system-riscv64 -version</span><br><span class="line">QEMU emulator version 4.0.50 (v4.0.0-1854-g57dfc2c4d5-dirty)</span><br><span class="line">Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure><h3 id="Specification">Specification</h3><blockquote><p>The RISC-V QEMU port supports the following targets:<sup>[4]</sup></p><ul><li><strong>riscv32-softmmu</strong> <em>(RV32 full-system emulator)</em></li><li><strong>riscv64-softmmu</strong> <em>(RV64 full-system emulator)</em></li><li><strong>riscv32-linux-user</strong> <em>(RV32 linux user-mode emulator)</em></li><li><strong>riscv64-linux-user</strong> <em>(RV64 linux user-mode emulator)</em></li></ul></blockquote><blockquote><p>**Tips: In this step, you may need to install some libraries. You can find related library package name you need use ** <code>sudo apt-cache search package-name</code> <strong>and then use</strong> <code>sudo apt install package-name</code>. For example, if you type sudo apt-cache search gcc, then you will get a series of packages with a string of gcc in its name.<sup>[5]</sup></p></blockquote><h1>Linux source code</h1><h3 id="Download">Download</h3><p>It is <strong>not</strong> an <strong>essential</strong> step if you have Linux source code on your system.</p><p>To finish the whole procedure of running riscv on qemu, I downloaded a new copy of Linux source code.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v5.x/linux-5.5.tar.xz</span><br></pre></td></tr></table></figure><p>If you want to download it to specific directory, please add <code>-P dir</code> after <code>wget</code>.</p><p>The second step is to decompress the source code.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -dkv linux-5.5.tar.xz <span class="comment">#d:decompression. k:keep the Compressed file. v:show the procedure</span></span><br><span class="line">tar -xvf linux-5.5.tar</span><br></pre></td></tr></table></figure><p>It may consume some time and don’t forget to add <code>-v</code>. Or you can only use <code>top</code> to know it is running(hhh).</p><h3 id="Make-do-this-after-building-Busybear">Make(do this after building Busybear)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> linux</span><br><span class="line">cp ~/my-riscv/busybear-linux/conf/linux.config .config </span><br><span class="line">make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- olddefconfig</span><br><span class="line">make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- menuconfig <span class="comment">#if needed</span></span><br><span class="line">make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- vmlinux -j $(nproc)</span><br></pre></td></tr></table></figure><h1>Busybear</h1><h3 id="Prerequisites-2">Prerequisites</h3><p><code>riscv-64-unknown-linux-gcc</code></p><h3 id="Make-3">Make</h3><p>Run this command to get the source code of busybear</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/michaeljclark/busybear-linux</span><br></pre></td></tr></table></figure><p>By the way, you can use this command to download riscv-pk which is needed next part in busybear-linux directory</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurisve https://github.com/michaeljclark/busybear-linux</span><br></pre></td></tr></table></figure><p>If you don’t want busybear to download linux source code here, you need to modify the shell file.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> scripts</span><br><span class="line">vi build.sh</span><br></pre></td></tr></table></figure><p>You can delete all lines about downloading, extracting and building linux. If you are not clear how to delete, please replace your <code>build.sh</code> with <code>build.sh</code> in <strong>Appendix</strong> of this blog.</p><p>Compile them and prepare a root filesystem image named busybear.bin</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> busybear-linuxx</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p><strong>Tips: It will cost much time. But don’t use <code>make -j4</code> or <code>make -j$(nproc)</code> because <code>build.sh</code> will download something from Internet. Use multi-processor will probably result into connection error.</strong></p><h3 id="Specification-2">Specification</h3><p>busybear-linux is a RISC-V Linux <strong>root filesystem image</strong> that targets the <code>virt</code> machine in riscv-qemu.<sup>[6]</sup></p><h1>riscv-pk</h1><h3 id="Make-4">Make</h3><p>Get the source code of riscv-pk</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/riscv/riscv-pk</span><br></pre></td></tr></table></figure><h3 id="Build-BBL">Build BBL</h3><p>Currently, you are in <code>riscv-pk</code>. And riscv-gnu-toolchain is added to <code>$PATH</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">../configure --<span class="built_in">enable</span>-logo --host=riscv64-unknown-elf --with-payload=~/build_kernel/linux-5.5/vmlinux</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h3 id="Specification-3">Specification</h3><p>We only need <code>bbl</code>. So, <code>make install</code> is not necessary.</p><p><code>bbl</code> is a supervisor execution environment for tethered RISC-V systems.(I haven’t figure it out yet)</p><h1>Run</h1><p>Run this command</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">qemu-system-riscv64 -nographic -machine virt \</span><br><span class="line">-kernel ~/my-riscv/riscv-pk/build/bbl \</span><br><span class="line">-append <span class="string">"root=/dev/vda ro console=ttyS0"</span> \</span><br><span class="line">-drive file=~/my-riscv/busybear-linux/busybear.bin,format=raw,id=hd0 \</span><br><span class="line">-device virtio-blk-device,drive=hd0</span><br></pre></td></tr></table></figure><p><strong>username: root</strong></p><p><strong>password:  busybear</strong></p><center><img src="/run-riscv-on-qemu/busybear.png" class></center><center> Fig.2 Run riscv on qemu </center>**The whole procedure refers to [riscv-getting-started](https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html)<sup>[7]</sup>**<h1>Reference</h1><p>[1] <a href="https://stackoverflow.com/questions/39419379/git-stuck-while-receiving-objects/43757291" target="_blank" rel="noopener">stuck while receiving objects</a></p><p>[2] <a href="https://en.wikipedia.org/wiki/Runtime_library" target="_blank" rel="noopener">Runtime library</a></p><p>[3] <a href="http://www.lujun.org.cn/?p=4257" target="_blank" rel="noopener">riscv各种版本gcc工具链编译与安装</a></p><p>[3] <a href="https://github.com/riscv/riscv-qemu/wiki" target="_blank" rel="noopener">Risc-V QEMU</a></p><p>[5] <a href="https://simonsungm.github.io/2019/09/18/linux4riscv-1-Install-GNU-toolchain-for-RISC-V/" target="_blank" rel="noopener">Download essential library</a></p><p>[6] <a href="https://github.com/michaeljclark/busybear-linux" target="_blank" rel="noopener">busybear-linux</a></p><p>[7] <a href="https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html" target="_blank" rel="noopener">riscv-getting-started</a></p><h1>Acknowledgement</h1><p><a href="www.github.com/vamosC">Chao Liang</a> helps me download the source code of riscv-gnu-toolchain.</p><h1>Appendix</h1><p><strong><a href="http://build.sh" target="_blank" rel="noopener">build.sh</a></strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">. conf/busybear.config</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># test environment</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> ARCH ABI CROSS_COMPILE BUSYBOX_VERSION \</span><br><span class="line">    DROPBEAR_VERSION LINUX_KERNEL_VERSION; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;!var&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;!var&#125;</span> not set"</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># find executables</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> prog <span class="keyword">in</span> <span class="variable">$&#123;CROSS_COMPILE&#125;</span>gcc sudo nproc curl openssl rsync; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -z $(<span class="built_in">which</span> <span class="variable">$&#123;prog&#125;</span>) ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"error: <span class="variable">$&#123;prog&#125;</span> not found in PATH"</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># download busybox, dropbear and linux</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">export</span> MAKEFLAGS=-j4</span><br><span class="line"><span class="built_in">test</span> -d archives || mkdir archives</span><br><span class="line"><span class="built_in">test</span> -f archives/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2 || \</span><br><span class="line">    curl -L -o archives/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2 \</span><br><span class="line">        https://busybox.net/downloads/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2</span><br><span class="line"><span class="built_in">test</span> -f archives/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2 || \</span><br><span class="line">    curl -L -o archives/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2 \</span><br><span class="line">        https://matt.ucc.asn.au/dropbear/releases/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2</span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -f archives/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz || \</span><br><span class="line">    curl -L -o archives/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz \</span><br><span class="line">        https://git.kernel.org/torvalds/t/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># extract busybox, dropbear and linux</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">test</span> -d build || mkdir build</span><br><span class="line"><span class="built_in">test</span> -d build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span> || \</span><br><span class="line">    tar -C build -xjf archives/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2</span><br><span class="line"><span class="built_in">test</span> -d build/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span> || \</span><br><span class="line">    tar -C build -xjf archives/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2</span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -d build/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span> || \</span><br><span class="line">    tar -C build -xzf archives/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># set default configurations</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cp conf/busybox.config build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>/.config</span><br><span class="line"><span class="comment">#cp conf/linux.config build/linux-$&#123;LINUX_KERNEL_VERSION&#125;/.config</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># build busybox, dropbear and linux</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">test</span> -x build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>/busybox || (</span><br><span class="line">    <span class="built_in">cd</span> build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span></span><br><span class="line">    make ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> oldconfig</span><br><span class="line">    make ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> -j$(nproc)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">test</span> -x build/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>/dropbear || (</span><br><span class="line">    <span class="built_in">cd</span> build/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span></span><br><span class="line">    ./configure --host=<span class="variable">$&#123;CROSS_COMPILE%-&#125;</span> --<span class="built_in">disable</span>-zlib</span><br><span class="line">    make -j$(nproc)</span><br><span class="line">)</span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -x build/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>/vmlinux || (</span><br><span class="line">    <span class="built_in">cd</span> build/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span></span><br><span class="line">    make ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> olddefconfig</span><br><span class="line">    make -j$(nproc) ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> vmlinux</span><br><span class="line">)</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># build bbl</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -d build/riscv-pk || mkdir build/riscv-pk</span><br><span class="line"><span class="built_in">test</span> -x build/riscv-pk/bbl || (</span><br><span class="line">    <span class="built_in">cd</span> build/riscv-pk</span><br><span class="line">    ../../src/riscv-pk/configure \</span><br><span class="line">        --host=<span class="variable">$&#123;CROSS_COMPILE%-&#125;</span> \</span><br><span class="line">        --with-payload=../linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>/vmlinux</span><br><span class="line">    make -j$(nproc)</span><br><span class="line">)</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># create filesystem image</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">sudo env PATH=<span class="variable">$&#123;PATH&#125;</span> UID=$(id -u) GID=$(id -g) \</span><br><span class="line">./scripts/image.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This blog is about the whole procedure of running riscv on qemu. It also records some pitfalls I encountered.&lt;/p&gt;
    
    </summary>
    
    
      <category term="riscv" scheme="https://clickmouse.github.io/categories/riscv/"/>
    
    
      <category term="OS" scheme="https://clickmouse.github.io/tags/OS/"/>
    
      <category term="riscv" scheme="https://clickmouse.github.io/tags/riscv/"/>
    
      <category term="qemu" scheme="https://clickmouse.github.io/tags/qemu/"/>
    
  </entry>
  
  <entry>
    <title>Speed up git</title>
    <link href="https://clickmouse.github.io/git-proxy/"/>
    <id>https://clickmouse.github.io/git-proxy/</id>
    <published>2020-01-29T09:06:46.796Z</published>
    <updated>2020-01-31T03:11:02.510Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I have bought a server from <a href="http://www.vultr.com" target="_blank" rel="noopener">www.vultr.com</a>. I used it to build a ladder to speed up git because it’s an urgent need for me.</p><a id="more"></a><h2 id="Prerequisites">Prerequisites</h2><p>SSR server</p><h2 id="Host">Host</h2><p>git config --global http.proxy ‘socks5://127.0.0.1:1080’<br>git config --global https.proxy ‘socks5://127.0.0.1:1080’</p><p>These two commands are enough.</p><h2 id="Vmware-Station">Vmware Station</h2><h3 id="Configure-ssr-option-setting">Configure ssr option setting</h3><ol><li>right click the small plane</li><li>click option setting</li><li>enable connection from LAN</li></ol><center><img src="/git-proxy/ssr.png" class></center><br><center><img src="/git-proxy/local_host.png" class></center><h3 id="Configure-proxy-setting-in-ubuntu">Configure proxy setting in ubuntu</h3><p><strong>Windows:  win-10</strong></p><p><strong>ubuntu version: 18.04</strong></p><ol><li>Use ipconfig in windows terminal and note down your ip address</li><li>Change Network Proxy from off to Manual</li><li>change HTTP Proxy and HTTPS Proxy to your ip address</li></ol><center><img src="/git-proxy/proxy_setting.png" class></center><br><center><img src="/git-proxy/in_proxy.png" class></center><p>Done. Now you can have better experience when using git.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I have bought a server from &lt;a href=&quot;http://www.vultr.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.vultr.com&lt;/a&gt;. I used it to build a ladder to speed up git because it’s an urgent need for me.&lt;/p&gt;
    
    </summary>
    
    
      <category term="git" scheme="https://clickmouse.github.io/categories/git/"/>
    
    
      <category term="git" scheme="https://clickmouse.github.io/tags/git/"/>
    
      <category term="proxy" scheme="https://clickmouse.github.io/tags/proxy/"/>
    
  </entry>
  
  <entry>
    <title>A brief understanding of GNU</title>
    <link href="https://clickmouse.github.io/GNU/"/>
    <id>https://clickmouse.github.io/GNU/</id>
    <published>2020-01-25T11:57:55.161Z</published>
    <updated>2020-01-29T07:52:30.917Z</updated>
    
    <content type="html"><![CDATA[<p>I have used tools developed by GNU project for many years like gcc&amp;g++. However I even don’t know what GNU is. Today when I saw the term ‘GNU toolchain’, I decided to figure out what GNU is.</p><a id="more"></a><h2 id="GNU">GNU</h2><p>GNU is an operating system and an extensive collection of computer software.<sup> [1]</sup> Actually, this definition has answered my question.  We can simply regard it as a replacement of Unix.  However, it’s operating system kernel, Hurd has not been developed for a long time.  So, the currently more popular Unix-like operating system is GNU/Linux or Linux.<sup>[2]</sup> If Hurd can be developed before 1991, maybe Linus didn’t need to do something ‘just for fun’.</p><h2 id="Base-system-sup-3-sup">Base system<sup>[3]</sup></h2><p>Some names are very familiar to me such as bash, grep, gzip and tar. I will go further in the future.</p><h2 id="Software-sup-3-sup">Software<sup>[3]</sup></h2><p>GNU toolchain, what I mentioned at the beginning of this blog is included in this section. Other libraries like glibc are also included.</p><p>Know more about software of GNU, please refer to the third reference.</p><h2 id="GNU-toolchain">GNU toolchain</h2><p>The GNU toolchain is a broad collection of programming tools produced by the GNU Project, which is used for developing software applications and operating systems.<sup>[4]</sup></p><p>Some tools like ‘make’, ‘GCC’, ‘GDB’ are familiar to me, while some names are a bit strange to me like ‘GNU Binutils’.  Actually, I have used tools included in it such as objdump and readelf.</p><p>Binutils are a set of programming tools for creating and managing binary programs, object files, libraries, profile, data and assembly source code.<sup>[5]</sup></p><p>Let’s go back to GNU toolchain.</p><p>As we all know, the compilation process is a sequential process.</p><img src="/GNU/compile.png" class><center>Fig.1 The procedure of compilation</center>Tools are used one by one. Consequently, they form a toolchain which takes source files as input and executable files as output. The details of preprocessing, compilation, assembly and linking will be hidden by using the toolchain.<h2 id="Reference">Reference</h2><p>[1] <a href="https://en.wikipedia.org/wiki/GNU" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU</a></p><p>[2] <a href="https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy</a></p><p>[3] <a href="https://en.wikipedia.org/wiki/List_of_GNU_packages#Software_development" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_GNU_packages#Software_development</a></p><p>[4] <a href="https://en.wikipedia.org/wiki/GNU_toolchain" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU_toolchain</a></p><p>[5] <a href="https://en.wikipedia.org/wiki/GNU_Binutils" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU_Binutils</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I have used tools developed by GNU project for many years like gcc&amp;amp;g++. However I even don’t know what GNU is. Today when I saw the term ‘GNU toolchain’, I decided to figure out what GNU is.&lt;/p&gt;
    
    </summary>
    
    
      <category term="OS" scheme="https://clickmouse.github.io/categories/OS/"/>
    
    
      <category term="GNU" scheme="https://clickmouse.github.io/tags/GNU/"/>
    
      <category term="OS" scheme="https://clickmouse.github.io/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://clickmouse.github.io/hello-world/"/>
    <id>https://clickmouse.github.io/hello-world/</id>
    <published>2020-01-21T12:56:23.633Z</published>
    <updated>2020-01-21T14:57:41.104Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start">Quick Start</h2><h3 id="Create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><a id="more"></a><h3 id="Run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      My first attempt
    
    </summary>
    
    
      <category term="blog" scheme="https://clickmouse.github.io/categories/blog/"/>
    
    
      <category term="blog" scheme="https://clickmouse.github.io/tags/blog/"/>
    
  </entry>
  
</feed>
