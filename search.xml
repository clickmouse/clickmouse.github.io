<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Learn Linux-0.12</title>
    <url>/Learn-Linux0_12/</url>
    <content><![CDATA[<p>很多基础知识自己都不懂，因此想要从Linux-0.12开始从基础学起，这篇博客作为自己的阅读笔记，不定时更新，为方便记录和不曲解原意，本篇博客用中文叙述。</p>
<p>本博客的参考资料为赵炯先生的<a href="http://oldlinux.org/download/CLK-5.0-WithCover.pdf" target="_blank" rel="noopener">《Linux内核完全注释 V5.0》</a></p>
<a id="more"></a>
<h3 id="组成部分">组成部分</h3>
<p>Linux 0.12 版本发布于 199 2 年 1 月15 日。在发布时包括以下文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bootimage-0.12.Z - 具有美国键盘代码的压缩启动映像文件；</span><br><span class="line">rootimage-0.12.Z - 以1200kB压缩的根文件系统映像文件；</span><br><span class="line">linux-0.12.tar.Z - 内核源代码文件。大小为130KB，展开后也仅有463KB；</span><br><span class="line">as86.tar.Z 		 - Bruce Evans&#39;二进制执行文件。是16位的汇编程序和装入程序；</span><br><span class="line">INSTALL-0.11 	 - 更新过的安装信息文件。</span><br></pre></td></tr></table></figure>
<p><code>bootimage</code>引导启动Image文件，包括<strong>磁盘引导扇区代码</strong>、<strong>操作系统加载程序</strong>和<strong>内核执行代码</strong>。</p>
<p>PC机启动时 ROM BIOS中的程序会把默认启动驱动器上的<strong>引导扇区代码和数据</strong>读入内存，引导扇区代码负责把<strong>操作系统加载程序</strong>和<strong>内核执行代码</strong>读入内存，然后把控制权交给<strong>操作系统加载程序</strong>进一步准备内核初始化操作，最终加载程序把控制权交给<strong>内核代码</strong>。</p>
<br>
<p>内核代码若要正常运行需要文件系统支持，<code>rootimage</code>是用于向内核提供最基本支持的根文件系统，包括操作系统最起码的<strong>配置文件</strong>和<strong>命令执行程序</strong>。</p>
<p>UNIX类文件系统主要包括一些规定的目录、配置文件、设备驱动程序、开发程序以及所有其他用户数据或文本文件等。</p>
<p><code>bootimage</code>+<code>rootimage</code>相当于一张可启动的DOS操作系统盘</p>
<p><code>as86.tar.Z</code> 是 16 位汇编器 链接程序软件包 。 <code>linux 0.12.tar.Z</code> 是 压缩的 Linux 0.12 内核源代码。<br>
<code>INSTALL 0.11</code>是Linux 0.11 系统的简单安装说明文档，它同样适用于使用0.12内核的Linux系统 。</p>
<h1>内核编程语言和环境</h1>
<h3 id="as86">as86</h3>
<p>汇编命令行的基本格式为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">as [选项] -o objfile srcfile</span><br></pre></td></tr></table></figure>
<p><code>选项</code>用来控制编译过程以产生指定格式和设置的目标文件。</p>
<p><code>srcfile</code> 是一个文本文件。该文件内容必须是由换行字符结尾的一系列文本行组成。</p>
<p>语句分类：</p>
<ol>
<li>只包含空格、制表符、和换行符的空行</li>
<li>赋值（定义）语句：标识符后跟等号+表达式 例如“BOOTSEG = 0x07C0&quot;</li>
<li>伪操作符语句：不产生代码，由伪操作码和0个或多个操作数组成</li>
<li>机器指令语句</li>
</ol>
]]></content>
      <categories>
        <category>os</category>
      </categories>
      <tags>
        <tag>os</tag>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Learn how to write Makefile</title>
    <url>/Learn-Makefile/</url>
    <content><![CDATA[<p><code>make</code> and <code>Makefile</code> are very important when building a project. As a programmer using Windows, I know little about <code>Makefile</code>.</p>
<p>I will record what I learned about <code>make</code> and <code>Makefile</code>.</p>
<a id="more"></a>
<h1>Introduction</h1>
<h3 id="Rule">Rule</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">target ... : prerequisites ...</span><br><span class="line">           <span class="built_in">command</span></span><br><span class="line">           ...</span><br><span class="line">           ...</span><br></pre></td></tr></table></figure>
<p><code>target</code> is an object file. It can be <code>.o</code> file or any <code>elf</code> file. It can also be a <code>label</code>.</p>
<p><code>prerequisites</code> are files or objects needed to generate <code>target</code>.</p>
<p><code>command</code> is any shell command needed to be executed</p>
<h3 id="Example">Example</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">main: main.o</span><br><span class="line">		cc -o main.o</span><br><span class="line">main.o: main.c defs.h</span><br><span class="line">		cc -c main.c</span><br><span class="line">clean:</span><br><span class="line">		rm main main.o</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>We will use <code>main.c</code> and <code>defs.h</code> to compile <code>main.c</code> to generate <code>main.o</code>.</p>
</li>
<li>
<p>We will use link <code>main.o</code>  to generate <code>main</code></p>
</li>
<li>
<p><code>clean</code> is a name of an action. Noting is behind <code>:</code> means no <code>prerequisites</code>. So when we execute <code>make</code>, commands under <code>clean</code> won’t be executed automatically. We must write <code>clean</code>, this label after <code>make</code> obviously.</p>
</li>
</ol>
<h3 id="How-does-it-work">How does it work</h3>
<p>The whole procedure is like a stack. To build <code>a</code> , we need <code>b c d</code>. If <code>b c d</code> don’t exist, we need to build <code>b c d</code>. Maybe we need <code> e f g</code> to build <code>b c d</code>.</p>
<p>Finally, we will find all basic files we need and ‘pop’ files one after another. If not, <code>make</code> will fail.</p>
<h3 id="Variable">Variable</h3>
<p>Now, we have a more complicated example:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">edit : main.o kbd.o command.o display.o /</span><br><span class="line">		insert.o search.o files.o utils.o</span><br><span class="line">		cc -o edit main.o kbd.o command.o display.o /</span><br><span class="line">			insert.o search.o files.o utils.o</span><br></pre></td></tr></table></figure>
<p>As we can see, many <code>.o</code> file repeat two times, which means if we add or remove one file, we must change it in two places. It’s not convenient.</p>
<p>To solve this problem, we can do like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">obj = main.o kbd.o command.o display.o /</span><br><span class="line">		insert.o search.o files.o utils.o</span><br><span class="line">edit: $(obj)</span><br><span class="line">		cc -o edit $(obj)</span><br></pre></td></tr></table></figure>
<p>Now, we only need to change <code>obj</code> to reach our goals.</p>
<h3 id="Automatic-derivation">Automatic derivation</h3>
<p>Let’s see the first example</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">main.o: main.c defs.h</span><br><span class="line">		cc -c main.c</span><br></pre></td></tr></table></figure>
<p>Actually, <code>make</code> knows <code>main.o</code> are built by <code>main.c</code>.  So, we don’t need to write a list of commands. The simplified one is like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">main.o: defs.h</span><br></pre></td></tr></table></figure>
<p>We only need to point out the head file <code>main.o</code> needs.</p>
<h3 id="Rules-for-clean">Rules for <code>clean</code></h3>
<p>The original parts for <code>clean</code> are like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">clean:</span><br><span class="line">		rm main main.o</span><br></pre></td></tr></table></figure>
<p>A more robust way of writing is like this:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.PHONY : clean</span><br><span class="line">clean: </span><br><span class="line">		-rm main main.o</span><br></pre></td></tr></table></figure>
<p><code>.PHONY</code> means that <code>clean</code> is Pseudo target. If there exists a file named <code>clean</code>. <code>.PHONY</code> will take effect.</p>
<p><code>-</code> means that maybe there’s something wrong with some of the files, but don’t worry. Go ahead.</p>
<h1>Rules</h1>
<h3 id="Search">Search</h3>
<h4 id="VPATH">VPATH</h4>
<p><code>VPATH</code> in <code>Makefile</code> will point out a directory. If files can’t be found in current directory, <code>make</code> will search in <code>VPATH</code>.</p>
<center>VPATH = src:../headers</center>
<p>In the example above, <code>VPATH</code> point out two directories: <code>src</code> and <code>../headers</code>. They are separated by <code>:</code>.</p>
<h4 id="vpath">vpath</h4>
<p>This is a keyword not a variable.</p>
<p>There are 3 methods:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. vpath &lt;pattern&gt; &lt;directories&gt;</span><br><span class="line"><span class="comment">#Specify search &lt;directories&gt; for files that match the &lt;pattern&gt;</span></span><br><span class="line">2. vpath &lt;pattern&gt;</span><br><span class="line"><span class="comment">#Clear search &lt;directories&gt; for files that match the &lt;pattern&gt;</span></span><br><span class="line">3. vpath</span><br><span class="line"><span class="comment">#Clear all &lt;directories&gt; that have been set up</span></span><br></pre></td></tr></table></figure>
<p><code>%</code> needs to be included in <code>&lt;pattern&gt;</code>. For example, <code>%.h</code> represents all files ending up with <code>.h</code>.</p>
<h3 id="Pseudo-target">Pseudo target</h3>
<p><code>clean</code> is a pseudo target. <code>.PHONY</code> specify a pseudo target obviously no matter whether there exists a file named <code>clean</code>.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">all: prog1 prog2 prog3</span><br><span class="line">.PHONY: all</span><br><span class="line"></span><br><span class="line">prog1: prog1.o utils.o</span><br><span class="line">	cc -o prog1 prog1.o utils.o</span><br><span class="line"></span><br><span class="line">prog2: prog2.o</span><br><span class="line">	cc -o prog2 prog2.o</span><br><span class="line"></span><br><span class="line">prog3: prog3.o sort.o utils.o</span><br><span class="line">	cc -o prog3 prog3.o sort.o utils.o</span><br></pre></td></tr></table></figure>
<p>The first target in <code>Makefile</code> will be used as its default target.</p>
<p><code>all</code> is a pseudo target depending on three other targets. By this way, many targets can be built together.</p>
]]></content>
      <categories>
        <category>Makefile</category>
      </categories>
      <tags>
        <tag>Makefile</tag>
        <tag>os</tag>
      </tags>
  </entry>
  <entry>
    <title>Run riscv on qemu</title>
    <url>/run-riscv-on-qemu/</url>
    <content><![CDATA[<p>This blog is about the whole procedure of running riscv on qemu. It also records some pitfalls I encountered.</p>
<a id="more"></a>
<h1>Preparation</h1>
<p>If you ever downloaded source code from GitHub, you must have experienced the desperation that the download speed is only 50kb/s. Moreover, downloads are interrupted from time to time due to network problems.</p>
<p>So, you need git proxy to solve this problem. Please refer to <a href="https://clickmouse.github.io/git-proxy/">my last blog</a>(最终发现没啥用…)</p>
<h1>Possible problem</h1>
<p>When I git clone riscv-gnu-toolchain from GitHub, it was often stuck while receiving objects.(usually 99%…)</p>
<p>Someone says that ‘VMware running on NAT has this problem. Changing it to Bridged will fix the issue.’<sup>[1] </sup></p>
<p>However, the same problem appeared on my host machine. Finally, I failed to fix this issue.</p>
<p>There are two possible solutions:</p>
<ol>
<li>Wait until it continues.</li>
<li>Interrupt and download again.</li>
</ol>
<p>The first one doesn’t make sense for me and the second one is to try your luck…</p>
<p>I have tried to download it again and again but fail.</p>
<p>Finally, I asked a senior studying in Japan to help me clone it and send it to me.</p>
<center><img src="/run-riscv-on-qemu/japan.png" class></center>
<center>Fig 1 Envy</center>
# Get riscv-gnu-toolchain
<h3 id="Prerequisites">Prerequisites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install autoconf automake autotools-dev curl python3 libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex texinfo gperf libtool patchutils bc zlib1g-dev libexpat-dev git</span><br></pre></td></tr></table></figure>
<p>To make sure you have <code>git</code> on your system before the next step. Other standard packages are needed to build the toolchain.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/my-riscv</span><br><span class="line">git <span class="built_in">clone</span> --recursive https://github.com/riscv/riscv-gnu-toolchain</span><br></pre></td></tr></table></figure>
<p>Because there are many submodules in this repository, so we need to add <code>--recursive</code> to fetch the submodules automatically.</p>
<h1>Installation(Newlib)</h1>
<h3 id="Make">Make</h3>
<p>Pick an install path by using <code>--prefix</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/clickmouse/my-riscv/opt/riscv</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>You will get riscv-64-unknown-elf-gcc and its cousins in <code>opt/riscv</code>. The c runtime library is Newlib.</p>
<h3 id="Specfication">Specfication</h3>
<p>Newlib is a runtime c standard library.</p>
<blockquote>
<p>A <strong>runtime library</strong> (<strong>RTL</strong>) is a set of low-level routines used by a <a href="https://en.wikipedia.org/wiki/Compiler" target="_blank" rel="noopener">compiler</a> to invoke some of the behaviors of a <a href="https://en.wikipedia.org/wiki/Runtime_environment" target="_blank" rel="noopener">runtime environment</a>, by inserting calls to the runtime library into compiled executable binary.<sup>[2]</sup></p>
</blockquote>
<p>A runtime library is needed by any c program. Functions such as _read(), _write(), _getpid() and so on are implemented in runtime library.</p>
<h3 id="Test">Test</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ./riscv64-unknown-elf-gcc -v</span><br></pre></td></tr></table></figure>
<p>You will get a lot of information about riscv64-unknown-elf-gcc.</p>
<p>Some useful information is listed below.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--target=riscv64-unknown-elf-gcc <span class="comment">#tool is riscv64-unknown-elf-gcc</span></span><br><span class="line">--with-newlib <span class="comment">#runtime lib --&gt; newlib</span></span><br><span class="line">--with-abi=lp64d <span class="comment">#The abi(Application Binary Interface)supported by the toolchain is lp64</span></span><br><span class="line">--with-arch=rv64imafdc <span class="comment">#architecture supported is rv64imafdc.</span></span><br><span class="line"><span class="comment">#imadfdc are names of ISA base and extensions</span></span><br></pre></td></tr></table></figure>
<h1>Installation(Linux)</h1>
<p>Pick an install path by using <code>--prefix</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure --prefix=/home/clickmous/my-riscv/opt/riscv-linux</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p>You will get riscv-64-unknown-linux-gcc and its cousins. The c runtime library is glibc.</p>
<h1>Installation(Others)</h1>
<p>Please refer to <a href="http://www.lujun.org.cn/?p=4257" target="_blank" rel="noopener">riscv各种版本gcc工具链编译与安装</a><sup>[3]</sup></p>
<h1>RISC-V QEMU</h1>
<h4 id="Make-2">Make</h4>
<p><code>current directory: riscv-gnu-toolchain</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> qemu</span><br><span class="line">./configure --target-list=riscv64-softmmu <span class="comment">#set target list (default: build everything)</span></span><br><span class="line"> make -j$(nproc)</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<p>If Errors are like this</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">install -d -m 0755 <span class="string">"/usr/local/share/qemu"</span></span><br><span class="line">install: cannot change permissions of ‘/usr/<span class="built_in">local</span>/share/qemu’: No such file or directory</span><br><span class="line">Makefile:828: recipe <span class="keyword">for</span> target <span class="string">'install-datadir'</span> failed</span><br></pre></td></tr></table></figure>
<p>Please run <code>sudo make install</code></p>
<p>You can test by running following commands</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ qemu-system-riscv64 -version</span><br><span class="line">QEMU emulator version 4.0.50 (v4.0.0-1854-g57dfc2c4d5-dirty)</span><br><span class="line">Copyright (c) 2003-2019 Fabrice Bellard and the QEMU Project developers</span><br></pre></td></tr></table></figure>
<h3 id="Specification">Specification</h3>
<blockquote>
<p>The RISC-V QEMU port supports the following targets:<sup>[4]</sup></p>
<ul>
<li><strong>riscv32-softmmu</strong> <em>(RV32 full-system emulator)</em></li>
<li><strong>riscv64-softmmu</strong> <em>(RV64 full-system emulator)</em></li>
<li><strong>riscv32-linux-user</strong> <em>(RV32 linux user-mode emulator)</em></li>
<li><strong>riscv64-linux-user</strong> <em>(RV64 linux user-mode emulator)</em></li>
</ul>
</blockquote>
<blockquote>
<p><strong>Tips: In this step, you may need to install some libraries. You can find related library package name you need use</strong> <code>sudo apt-cache search package-name</code> <strong>and then use</strong> <code>sudo apt install package-name</code>. For example, if you type sudo apt-cache search gcc, then you will get a series of packages with a string of gcc in its name.<sup>[5]</sup></p>
</blockquote>
<h1>Linux source code</h1>
<h3 id="Download">Download</h3>
<p>It is <strong>not</strong> an <strong>essential</strong> step if you have Linux source code on your system.</p>
<p>To finish the whole procedure of running riscv on qemu, I downloaded a new copy of Linux source code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://ftp.sjtu.edu.cn/sites/ftp.kernel.org/pub/linux/kernel/v5.x/linux-5.5.tar.xz</span><br></pre></td></tr></table></figure>
<p>If you want to download it to specific directory, please add <code>-P dir</code> after <code>wget</code>.</p>
<p>The second step is to decompress the source code.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">xz -dkv linux-5.5.tar.xz <span class="comment">#d:decompression. k:keep the Compressed file. v:show the procedure</span></span><br><span class="line">tar -xvf linux-5.5.tar</span><br></pre></td></tr></table></figure>
<p>It may consume some time and don’t forget to add <code>-v</code>. Or you can only use <code>top</code> to know it is running(hhh).</p>
<h3 id="Make-do-this-after-building-Busybear">Make(do this after building Busybear)</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> linux</span><br><span class="line">cp ~/my-riscv/busybear-linux/conf/linux.config .config </span><br><span class="line">make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- olddefconfig</span><br><span class="line">make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- menuconfig <span class="comment">#if needed</span></span><br><span class="line">make ARCH=riscv CROSS_COMPILE=riscv64-unknown-linux-gnu- vmlinux -j $(nproc)</span><br></pre></td></tr></table></figure>
<h1>Busybear</h1>
<h3 id="Prerequisites-2">Prerequisites</h3>
<p><code>riscv-64-unknown-linux-gcc</code></p>
<h3 id="Make-3">Make</h3>
<p>Run this command to get the source code of busybear</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/michaeljclark/busybear-linux</span><br></pre></td></tr></table></figure>
<p>By the way, you can use this command to download riscv-pk which is needed next part in busybear-linux directory</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> --recurisve https://github.com/michaeljclark/busybear-linux</span><br></pre></td></tr></table></figure>
<p>If you don’t want busybear to download linux source code here, you need to modify the shell file.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> scripts</span><br><span class="line">vi build.sh</span><br></pre></td></tr></table></figure>
<p>You can delete all lines about downloading, extracting and building linux. If you are not clear how to delete, please replace your <code>build.sh</code> with <code>build.sh</code> in <strong>Appendix</strong> of this blog.</p>
<p>Compile them and prepare a root filesystem image named busybear.bin</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> busybear-linuxx</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<p><strong>Tips: It will cost much time. But don’t use <code>make -j4</code> or <code>make -j$(nproc)</code> because <code>build.sh</code> will download something from Internet. Use multi-processor will probably result into connection error.</strong></p>
<h3 id="Specification-2">Specification</h3>
<p>busybear-linux is a RISC-V Linux <strong>root filesystem image</strong> that targets the <code>virt</code> machine in riscv-qemu.<sup>[6]</sup></p>
<h1>riscv-pk</h1>
<h3 id="Make-4">Make</h3>
<p>Get the source code of riscv-pk</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/riscv/riscv-pk</span><br></pre></td></tr></table></figure>
<h3 id="Build-BBL">Build BBL</h3>
<p>Currently, you are in <code>riscv-pk</code>. And riscv-gnu-toolchain is added to <code>$PATH</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir build &amp;&amp; <span class="built_in">cd</span> build</span><br><span class="line">../configure --<span class="built_in">enable</span>-logo --host=riscv64-unknown-elf --with-payload=~/build_kernel/linux-5.5/vmlinux</span><br><span class="line">make</span><br></pre></td></tr></table></figure>
<h3 id="Specification-3">Specification</h3>
<p>We only need <code>bbl</code>. So, <code>make install</code> is not necessary.</p>
<p><code>bbl</code> is a supervisor execution environment for tethered RISC-V systems.(I haven’t figure it out yet)</p>
<h1>Run<sup>[7]</sup></h1>
<p>Run this command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-riscv64 -nographic -machine virt \</span><br><span class="line">-kernel ~/my-riscv/riscv-pk/build/bbl \</span><br><span class="line">-append <span class="string">"root=/dev/vda ro console=ttyS0"</span> \</span><br><span class="line">-drive file=~/my-riscv/busybear-linux/busybear.bin,format=raw,id=hd0 \</span><br><span class="line">-device virtio-blk-device,drive=hd0</span><br></pre></td></tr></table></figure>
<p><strong>username: root</strong></p>
<p><strong>password:  busybear</strong></p>
<center><img src="/run-riscv-on-qemu/busybear.png" class></center>
<center> Fig.2 Run riscv on qemu </center>
<p>If you want to shutdown QEMU. There are two methods.</p>
<ol>
<li><code>ctrl+A+X</code> but it doesn’t work on my system.</li>
<li><code>ps aux|grep qemu</code> find the <code>pid</code> of <code>qemu-riscv64</code>. <code>kill pid</code></li>
</ol>
<h1>Debug<sup>[8]</sup></h1>
<p>Run this command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-riscv64 -nographic -machine virt \</span><br><span class="line">-kernel ~/my-riscv/riscv-pk/build/bbl \</span><br><span class="line">-append <span class="string">"root=/dev/vda ro console=ttyS0"</span> \</span><br><span class="line">-drive file=~/my-riscv/busybear-linux/busybear.bin,format=raw,id=hd0 \</span><br><span class="line">-device virtio-blk-device,drive=hd0</span><br><span class="line">-S -s</span><br></pre></td></tr></table></figure>
<p>Open qemu and wait for gdb to attach</p>
<p>Open another terminal and run this command</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">riscv64-unknown-linux-gnu-gdb ~/build_kernel/linux5.5/vmlinux</span><br><span class="line">(gdb) target remote localhost: 1234 <span class="comment">#attach</span></span><br></pre></td></tr></table></figure>
<h1>Acknowledgement</h1>
<p><a href="https://www.github.com/VamosC" target="_blank" rel="noopener">Chao Liang</a> helps me download the source code of riscv-gnu-toolchain.</p>
<h1>Reference</h1>
<p>[1] <a href="https://stackoverflow.com/questions/39419379/git-stuck-while-receiving-objects/43757291" target="_blank" rel="noopener">stuck while receiving objects</a></p>
<p>[2] <a href="https://en.wikipedia.org/wiki/Runtime_library" target="_blank" rel="noopener">Runtime library</a></p>
<p>[3] <a href="http://www.lujun.org.cn/?p=4257" target="_blank" rel="noopener">riscv各种版本gcc工具链编译与安装</a></p>
<p>[3] <a href="https://github.com/riscv/riscv-qemu/wiki" target="_blank" rel="noopener">Risc-V QEMU</a></p>
<p>[5] <a href="https://simonsungm.github.io/2019/09/18/linux4riscv-1-Install-GNU-toolchain-for-RISC-V/" target="_blank" rel="noopener">Download essential library</a></p>
<p>[6] <a href="https://github.com/michaeljclark/busybear-linux" target="_blank" rel="noopener">busybear-linux</a></p>
<p>[7] <a href="https://risc-v-getting-started-guide.readthedocs.io/en/latest/linux-qemu.html" target="_blank" rel="noopener">riscv-getting-started</a></p>
<p>[8] <a href="http://docs.keystone-enclave.org/en/latest/Getting-Started/How-to-Debug.html" target="_blank" rel="noopener">how to debug</a></p>
<h1>Appendix</h1>
<p><strong><a href="http://build.sh" target="_blank" rel="noopener">build.sh</a></strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line"></span><br><span class="line">. conf/busybear.config</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># test environment</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> var <span class="keyword">in</span> ARCH ABI CROSS_COMPILE BUSYBOX_VERSION \</span><br><span class="line">    DROPBEAR_VERSION LINUX_KERNEL_VERSION; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;!var&#125;</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"<span class="variable">$&#123;!var&#125;</span> not set"</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># find executables</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">for</span> prog <span class="keyword">in</span> <span class="variable">$&#123;CROSS_COMPILE&#125;</span>gcc sudo nproc curl openssl rsync; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ -z $(<span class="built_in">which</span> <span class="variable">$&#123;prog&#125;</span>) ]; <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"error: <span class="variable">$&#123;prog&#125;</span> not found in PATH"</span> &amp;&amp; <span class="built_in">exit</span> 1</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># download busybox, dropbear and linux</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">export</span> MAKEFLAGS=-j4</span><br><span class="line"><span class="built_in">test</span> -d archives || mkdir archives</span><br><span class="line"><span class="built_in">test</span> -f archives/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2 || \</span><br><span class="line">    curl -L -o archives/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2 \</span><br><span class="line">        https://busybox.net/downloads/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2</span><br><span class="line"><span class="built_in">test</span> -f archives/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2 || \</span><br><span class="line">    curl -L -o archives/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2 \</span><br><span class="line">        https://matt.ucc.asn.au/dropbear/releases/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2</span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -f archives/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz || \</span><br><span class="line">    curl -L -o archives/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz \</span><br><span class="line">        https://git.kernel.org/torvalds/t/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># extract busybox, dropbear and linux</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">test</span> -d build || mkdir build</span><br><span class="line"><span class="built_in">test</span> -d build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span> || \</span><br><span class="line">    tar -C build -xjf archives/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>.tar.bz2</span><br><span class="line"><span class="built_in">test</span> -d build/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span> || \</span><br><span class="line">    tar -C build -xjf archives/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>.tar.bz2</span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -d build/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span> || \</span><br><span class="line">    tar -C build -xzf archives/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>.tar.gz</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># set default configurations</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">cp conf/busybox.config build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>/.config</span><br><span class="line"><span class="comment">#cp conf/linux.config build/linux-$&#123;LINUX_KERNEL_VERSION&#125;/.config</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># build busybox, dropbear and linux</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="built_in">test</span> -x build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span>/busybox || (</span><br><span class="line">    <span class="built_in">cd</span> build/busybox-<span class="variable">$&#123;BUSYBOX_VERSION&#125;</span></span><br><span class="line">    make ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> oldconfig</span><br><span class="line">    make ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> -j$(nproc)</span><br><span class="line">)</span><br><span class="line"><span class="built_in">test</span> -x build/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span>/dropbear || (</span><br><span class="line">    <span class="built_in">cd</span> build/dropbear-<span class="variable">$&#123;DROPBEAR_VERSION&#125;</span></span><br><span class="line">    ./configure --host=<span class="variable">$&#123;CROSS_COMPILE%-&#125;</span> --<span class="built_in">disable</span>-zlib</span><br><span class="line">    make -j$(nproc)</span><br><span class="line">)</span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -x build/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>/vmlinux || (</span><br><span class="line">    <span class="built_in">cd</span> build/linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span></span><br><span class="line">    make ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> olddefconfig</span><br><span class="line">    make -j$(nproc) ARCH=riscv CROSS_COMPILE=<span class="variable">$&#123;CROSS_COMPILE&#125;</span> vmlinux</span><br><span class="line">)</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># build bbl</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line">:&lt;&lt;!</span><br><span class="line"><span class="built_in">test</span> -d build/riscv-pk || mkdir build/riscv-pk</span><br><span class="line"><span class="built_in">test</span> -x build/riscv-pk/bbl || (</span><br><span class="line">    <span class="built_in">cd</span> build/riscv-pk</span><br><span class="line">    ../../src/riscv-pk/configure \</span><br><span class="line">        --host=<span class="variable">$&#123;CROSS_COMPILE%-&#125;</span> \</span><br><span class="line">        --with-payload=../linux-<span class="variable">$&#123;LINUX_KERNEL_VERSION&#125;</span>/vmlinux</span><br><span class="line">    make -j$(nproc)</span><br><span class="line">)</span><br><span class="line">!</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># create filesystem image</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">sudo env PATH=<span class="variable">$&#123;PATH&#125;</span> UID=$(id -u) GID=$(id -g) \</span><br><span class="line">./scripts/image.sh</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>riscv</category>
      </categories>
      <tags>
        <tag>OS</tag>
        <tag>riscv</tag>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title>Speed up git</title>
    <url>/git-proxy/</url>
    <content><![CDATA[<p>Recently, I have bought a server from <a href="http://www.vultr.com" target="_blank" rel="noopener">www.vultr.com</a>. I used it to build a ladder to speed up git because it’s an urgent need for me.</p>
<a id="more"></a>
<h2 id="Prerequisites">Prerequisites</h2>
<p>SSR server</p>
<h2 id="Host">Host</h2>
<p>git config --global http.proxy ‘socks5://127.0.0.1:1080’<br>
git config --global https.proxy ‘socks5://127.0.0.1:1080’</p>
<p>These two commands are enough.</p>
<h2 id="Vmware-Station">Vmware Station</h2>
<h3 id="Configure-ssr-option-setting">Configure ssr option setting</h3>
<ol>
<li>right click the small plane</li>
<li>click option setting</li>
<li>enable connection from LAN</li>
</ol>
<center><img src="/git-proxy/ssr.png" class></center>
<br>
<center><img src="/git-proxy/local_host.png" class></center>
<h3 id="Configure-proxy-setting-in-ubuntu">Configure proxy setting in ubuntu</h3>
<p><strong>Windows:  win-10</strong></p>
<p><strong>ubuntu version: 18.04</strong></p>
<ol>
<li>Use ipconfig in windows terminal and note down your ip address</li>
<li>Change Network Proxy from off to Manual</li>
<li>change HTTP Proxy and HTTPS Proxy to your ip address</li>
</ol>
<center><img src="/git-proxy/proxy_setting.png" class></center>
<br>
<center><img src="/git-proxy/in_proxy.png" class></center>
<p>Done. Now you can have better experience when using git.</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>proxy</tag>
      </tags>
  </entry>
  <entry>
    <title>A brief understanding of GNU</title>
    <url>/GNU/</url>
    <content><![CDATA[<p>I have used tools developed by GNU project for many years like gcc&amp;g++. However I even don’t know what GNU is. Today when I saw the term ‘GNU toolchain’, I decided to figure out what GNU is.</p>
<a id="more"></a>
<h2 id="GNU">GNU</h2>
<p>GNU is an operating system and an extensive collection of computer software.<sup> [1]</sup> Actually, this definition has answered my question.  We can simply regard it as a replacement of Unix.  However, it’s operating system kernel, Hurd has not been developed for a long time.  So, the currently more popular Unix-like operating system is GNU/Linux or Linux.<sup>[2]</sup> If Hurd can be developed before 1991, maybe Linus didn’t need to do something ‘just for fun’.</p>
<h2 id="Base-system-sup-3-sup">Base system<sup>[3]</sup></h2>
<p>Some names are very familiar to me such as bash, grep, gzip and tar. I will go further in the future.</p>
<h2 id="Software-sup-3-sup">Software<sup>[3]</sup></h2>
<p>GNU toolchain, what I mentioned at the beginning of this blog is included in this section. Other libraries like glibc are also included.</p>
<p>Know more about software of GNU, please refer to the third reference.</p>
<h2 id="GNU-toolchain">GNU toolchain</h2>
<p>The GNU toolchain is a broad collection of programming tools produced by the GNU Project, which is used for developing software applications and operating systems.<sup>[4]</sup></p>
<p>Some tools like ‘make’, ‘GCC’, ‘GDB’ are familiar to me, while some names are a bit strange to me like ‘GNU Binutils’.  Actually, I have used tools included in it such as objdump and readelf.</p>
<p>Binutils are a set of programming tools for creating and managing binary programs, object files, libraries, profile, data and assembly source code.<sup>[5]</sup></p>
<p>Let’s go back to GNU toolchain.</p>
<p>As we all know, the compilation process is a sequential process.</p>
<img src="/GNU/compile.png" class>
<center>Fig.1 The procedure of compilation</center>
Tools are used one by one. Consequently, they form a toolchain which takes source files as input and executable files as output. The details of preprocessing, compilation, assembly and linking will be hidden by using the toolchain.
<h2 id="Reference">Reference</h2>
<p>[1] <a href="https://en.wikipedia.org/wiki/GNU" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU</a></p>
<p>[2] <a href="https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU/Linux_naming_controversy</a></p>
<p>[3] <a href="https://en.wikipedia.org/wiki/List_of_GNU_packages#Software_development" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/List_of_GNU_packages#Software_development</a></p>
<p>[4] <a href="https://en.wikipedia.org/wiki/GNU_toolchain" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU_toolchain</a></p>
<p>[5] <a href="https://en.wikipedia.org/wiki/GNU_Binutils" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/GNU_Binutils</a></p>
]]></content>
      <categories>
        <category>OS</category>
      </categories>
      <tags>
        <tag>GNU</tag>
        <tag>OS</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start">Quick Start</h2>
<h3 id="Create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<a id="more"></a>
<h3 id="Run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>blog</category>
      </categories>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
